datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
library("Rcmdr", lib.loc="C:/Users/mbonoli/Documents/R/win-library/3.0")
.libPath()
.libPaths()
gvisGauge
gvisAnnotatedTimeLine
dataplot <- googleVis:::gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
plot(dataplot)
dataplot <- googleVis:::gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
scalecol
dataplot <- gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
wd <- wd10
year <- 2013
month <- 2
vars=c("Ave","Min","Max","Dir")
axis=c("Ave","Min","Max","Dir")
require (googleVis)
data<-data.frame(dt=as.POSIXct(NA),val=NA,type=NA)
colorlines<-"["
# 'blue', 'lightblue', 'lightblue', 'red']"
if ("Ave" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$ave,type="Ave")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'blue'",sep="")
}
if ("Min" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$min,type="Min")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Max" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$max,type="Max")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Temp" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$temp$value,type="Temp")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'green'",sep="")
}
if ("Pres" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$pres$value,type="Pres")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgreen'",sep="")
}
if ("Dir" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$dir$value,type="Dir")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'black'",sep="")
}
colorlines<-paste(colorlines,"]")
# Borro registros sin datos
data<-data[!is.na(data$dt),]
#data<-data[!is.na(data$val),]
# esto es para que las escalas de las 3 velocidades sea la misma. Se modifica el primer registro de la serie
max<-max(data[data$type=="Max","val"],na.rm = TRUE)
data[data$type=="Min",][1,2]<-max
data[data$type=="Ave",][1,2]<-max
if (length(axis)==1) {
scalecol<-paste("[",which(vars==axis[1])-1,"]",sep="")
} else {
scalecol<-paste("[",which(vars==axis[1])-1,",",which(vars==axis[2])-1,"]",sep="")
}
dataplot <- gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
summary(data)
head(data)
table(data$type)
plot(dataplot)
wd <- wd10
year <- 2013
month <- 2
vars=c("Ave","Min","Max","Dir")
axis=c("Ave","Min","Max","Dir")
require (googleVis)
data<-data.frame(dt=as.POSIXct(NA),val=NA,type=NA)
colorlines<-"["
# 'blue', 'lightblue', 'lightblue', 'red']"
if ("Ave" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$ave,type="Ave")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'blue'",sep="")
}
if ("Min" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$min,type="Min")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Max" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$max,type="Max")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Temp" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$temp$value,type="Temp")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'green'",sep="")
}
if ("Pres" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$pres$value,type="Pres")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgreen'",sep="")
}
# if ("Dir" %in% vars) {
#   data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$dir$value,type="Dir")[wd$time$year==year & wd$time$month==month,])
#   colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'black'",sep="")
# }
colorlines<-paste(colorlines,"]")
# Borro registros sin datos
data<-data[!is.na(data$dt),]
#data<-data[!is.na(data$val),]
# esto es para que las escalas de las 3 velocidades sea la misma. Se modifica el primer registro de la serie
max<-max(data[data$type=="Max","val"],na.rm = TRUE)
data[data$type=="Min",][1,2]<-max
data[data$type=="Ave",][1,2]<-max
if (length(axis)==1) {
scalecol<-paste("[",which(vars==axis[1])-1,"]",sep="")
} else {
scalecol<-paste("[",which(vars==axis[1])-1,",",which(vars==axis[2])-1,"]",sep="")
}
browser()
dataplot <- gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
table(data$type)
plot(dataplot)
head(data)
## Data with POSIXct datetime variable
A5 <- gvisAnnotatedTimeLine(Andrew, datevar="Date/Time UTC",
numvar="Pressure_mb",
options=list(scaleType='maximized')
)
plot(A5)
dataplot <- gvisAnnotatedTimeLine(data[data$type=="Ave",1:2],
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
dataplot <- gvisAnnotatedTimeLine(data[data$type=="Ave",1:2],
datevar="dt",
numvar="val",
#                                   idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
str(data[data$type=="Ave",1:2])
table(data[data$type=="Ave",1])
head(wd$time$dt)
str(data)
str(wd)
str(wd10)
head(data$time)
head(data[["time"]])
head(wd[["time"]])
wd[["time"]]
wd[["time"]]$dt
wd10[["time"]]$dt
wd$time$year
as.POSIXct(paste(result$time$year,".",pref0(result$time$month,2),".",pref0(result$time$day,2)," ",pref0(result$time$hour,2),":",pref0(result$time$Min,2),":00",sep=""), "%Y.%m.%d %H:%M:%S", tz="")
result <- wd
as.POSIXct(paste(result$time$year,".",pref0(result$time$month,2),".",pref0(result$time$day,2)," ",pref0(result$time$hour,2),":",pref0(result$time$Min,2),":00",sep=""), "%Y.%m.%d %H:%M:%S", tz="")
paste(result$time$year,
".",
pref0(result$time$month,2),
".",
pref0(result$time$day,2),
" ",
pref0(result$time$hour,2),
":",
pref0(result$time$Min,2),
":00",
sep="")
paste(result$time$year,
".",
pref0(result$time$month,2),
".",
pref0(result$time$day,2),
" ",
pref0(result$time$hour,2),
":",
pref0(result$time$min,2),
":00",
sep="")
wd$time$dt <- as.POSIXct(
paste(wd$time$year,
".",
pref0(wd$time$month,2),
".",
pref0(wd$time$day,2),
" ",
pref0(wd$time$hour,2),
":",
pref0(wd$time$min,2),
":00",
sep=""), "%Y.%m.%d %H:%M:%S", tz="")
wd10$time$dt <- as.POSIXct(
paste(wd10$time$year,
".",
pref0(wd10$time$month,2),
".",
pref0(wd10$time$day,2),
" ",
pref0(wd10$time$hour,2),
":",
pref0(wd10$time$min,2),
":00",
sep=""), "%Y.%m.%d %H:%M:%S", tz="")
setwd("~/GitHub/WindResource/data")
save(wd,file="wd.RData")
str(wd)
class(wd10)<-"windata"
save(wd10,file="wd10_.RData")
library(WindResource)
data(wd)
library("WindResource")
library(shiny)
data(wd)
data(wd10)
library("WindResource")
library(shiny)
data(wd10)
detach("package:WindResource", unload=TRUE)
library("WindResource", lib.loc="C:/Users/mbonoli/Documents/R/win-library/3.0")
data(wd10)
library("WindResource")
library(shiny)
data(wd10)
load("~/GitHub/WindResource/data/wd10.Rdata")
save (wd10, file="wd10_1.Rdata")
save (wd10, file="wd10_1.Rdata",ascii=T)
save (wd10, file="wd10_1.Rdata",ascii=T,compress=F)
save (wd10, file="wd10.Rdata",ascii=T,compress=F)
library(WindResource)
library(WindResource)
library("tools", lib.loc="C:/Program Files/R/R-3.0.3/library")
checkRdaFiles (wd)
setwd("~/GitHub/WindResource/data")
checkRdaFiles("~/GitHub/WindResource/data")
checkRdaFiles("~/GitHub/WindResource/data/wd.Rdata")
ww <- load("wd.Rdata")
save(ww,file="ww.Rdata",ascii=T,compress=T)
save(ww,file="ww.Rdata",ascii=T,compress=TRUE)
memoria(ww)
memory(ww)
memmory(ww)
memmory(ww)
memmory(ww)
mem(ww)
checkRdaFiles("~/GitHub/WindResource/data/wd10_.Rdata")
resaveRdaFiles("~/GitHub/WindResource/data/wd10_.Rdata")
resaveRdaFiles("~/GitHub/WindResource/data/wd10__.Rdata")
checkRdaFiles("~/GitHub/WindResource/data/wd10__.Rdata")
resaveRdaFiles("~/GitHub/WindResource/data/wd10__.Rdata",ascii=T)
checkRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata")
resaveRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata")
checkRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata")
resaveRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata",compress=TRUE)
library(WindResource)
resaveRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata")
checkRdaFiles("C:/Users/mbonoli/Documents/R/win-library/3.0/statmod/data/welding.rdata")
checkRdaFiles("C:/Users/mbonoli/Documents/R/win-library/3.0/statmod/data/welding.rdata")
checkRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata")
resaveRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata",compress=FALSE)
resaveRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata",compress="")
resaveRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata",compress="auto")
checkRdaFiles("~/GitHub/WindResource/data/wd10_1.Rdata")
save(wd,file="wdd.rdata",compress=F,ascii=F)
save(wd,file="wd.rdata",compress=F,ascii=F)
save(wd10,file="wd10.rdata",compress=F,ascii=F)
checkRdaFiles("~/GitHub/WindResource/data/wd10.Rdata")
checkRdaFiles("~/GitHub/WindResource/data/wd.Rdata")
save(wd,file="wd.rda",compress=TRUE)
save(wd10,file="wd10.rda",compress=TRUE)
library(WindResource)
data(wd10)
head(wd[["tme"]])
head(wd[["time"]])
head(wd[["time"]]$dt)
head(wd10[["time"]])
head(wd[["time"]])
str(wd)
head(as.data.frame(wd[["time"]]))
head(wd[["time"]]$dt)
wd[["time"]] <- as.data.frame(wd[["time"]])
wd10$time$dt <- as.POSIXct(
paste(wd10$time$year,
".",
pref0(wd10$time$month,2),
".",
pref0(wd10$time$day,2),
" ",
pref0(wd10$time$hour,2),
":",
pref0(wd10$time$min,2),
":00",
sep=""), "%Y.%m.%d %H:%M:%S", tz="")
head(wd10[["time"]]$dt)
wd10$time$dt <- as.POSIXct(
paste(wd10$time$year,
".",
pref0(wd10$time$month,2),
".",
pref0(wd10$time$day,2),
" ",
pref0(wd10$time$hour,2),
":",
pref0(wd10$time$min,2),
":00",
sep=""), "%Y.%m.%d %H:%M:%S", tz="")
wd$time$dt <- as.POSIXct(
paste(wd$time$year,
".",
pref0(wd$time$month,2),
".",
pref0(wd$time$day,2),
" ",
pref0(wd$time$hour,2),
":",
pref0(wd$time$min,2),
":00",
sep=""), "%Y.%m.%d %H:%M:%S", tz="")
head(wd[["time"]]$dt)
wd10$dir$ang_16 <- (wd10$dir$sect_16-1)*22.5
wd <- wd10
year <- 2013
month <- 2
vars=c("Ave","Min","Max","Dir")
axis=c("Ave","Min","Max","Dir")
require (googleVis)
data<-data.frame(dt=as.POSIXct(NA),val=NA,type=NA)
colorlines<-"["
# 'blue', 'lightblue', 'lightblue', 'red']"
if ("Ave" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$ave,type="Ave")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'blue'",sep="")
}
if ("Min" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$min,type="Min")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Max" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$max,type="Max")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Temp" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$temp$value,type="Temp")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'green'",sep="")
}
if ("Pres" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$pres$value,type="Pres")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgreen'",sep="")
}
# if ("Dir" %in% vars) {
#   data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$dir$value,type="Dir")[wd$time$year==year & wd$time$month==month,])
#   colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'black'",sep="")
# }
colorlines<-paste(colorlines,"]")
# Borro registros sin datos
data<-data[!is.na(data$dt),]
#data<-data[!is.na(data$val),]
# esto es para que las escalas de las 3 velocidades sea la misma. Se modifica el primer registro de la serie
max<-max(data[data$type=="Max","val"],na.rm = TRUE)
data[data$type=="Min",][1,2]<-max
data[data$type=="Ave",][1,2]<-max
if (length(axis)==1) {
scalecol<-paste("[",which(vars==axis[1])-1,"]",sep="")
} else {
scalecol<-paste("[",which(vars==axis[1])-1,",",which(vars==axis[2])-1,"]",sep="")
}
dataplot <- gvisAnnotatedTimeLine(data[data$type=="Ave",1:2],
datevar="dt",
numvar="val",
#                                   idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
plot(dataplot)
plot(dataplot)
dataplot <- gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
plot(dataplot)
head(data)
dataplot <- gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type"
#                                   ,
#                                   options=list(
#                                     colors=colorlines,
#                                     zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
#                                     zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
#                                     legendPosition='newRow',
#                                     width=1000,
#                                     height=700,
#                                     scaleColumns="[0,3]", #scalecol,
#                                     scaleType='allfixed')
)
plot(dataplot)
}
dataplot <- gvisAnnotatedTimeLine(data,
datevar="dt",
numvar="val",
idvar="type"
#                                   ,
#                                   options=list(
#                                     colors=colorlines,
#                                     zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
#                                     zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
#                                     legendPosition='newRow',
#                                     width=1000,
#                                     height=700,
#                                     scaleColumns="[0,3]", #scalecol,
#                                     scaleType='allfixed')
)
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
source('~/GitHub/WindResource/R/plot.wind.serie.R', echo=TRUE)
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
source('~/GitHub/WindResource/R/plot.wind.serie.R')
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
source('~/GitHub/WindResource/inst/shiny/server.R')
runApp("~/GitHub/WindResource/inst/shiny",launch.browser = rstudio::viewer)
