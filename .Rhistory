focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
#                    options=list(
#                      title="Calendar heat map of MSFT adjsuted close",
#                      calendar="{cellSize:10,
#                                  yearLabel:{fontSize:20, color:'#444444'},
#                                  focusedCellColor:{stroke:'red'}}",
#                      width=590, height=320),
chartid="Calendar")
)
summary(dataplot)
dataplot <- complete.cases(dataplot)
dataplot
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
#                    options=list(
#                      title="Calendar heat map of MSFT adjsuted close",
#                      calendar="{cellSize:10,
#                                  focusedCellColor:{stroke:'red'}}",
#                                  yearLabel:{fontSize:20, color:'#444444'},
#                      width=590, height=320),
chartid="Calendar")
)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
summary(dataplot)
dataplot <- data.frame(date=as.Date(names(df)), value=df)
complete.cases(dataplot)
dataplot <- dataplot[complete.cases(dataplot),]
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
summary(dataplot)
source('~/GitHub/WindResource/R/plotcalendar.R')
plot(
gvisCalendar(data=dp2,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
df <- data.frame(date=as.factor(as.Date(wd10$time$dt)),
ave=wd10$ane$Ane1$ave)
head(df)
tapply(df$ave,df$date,ave)
str(tapply(df[,2],df[,1],mean))
dataplot <- tapply(df[,2],df[,1],mean)
dp <- data.frame(date=as.Date(names(dataplot)), value=dataplot)
str(dp)
plot(
gvisCalendar(data=dp2,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
dp2 <- dp[!is.na(dp$value),]
summary(dp2)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
stock <- "MSFT"
start.date <- "2012-01-01"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data$Date <- as.Date(stock.data$Date)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
str(dataplot)
str(stock.data)
str(stock.data)
str(dataplot)
dataplot
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
dataplot
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
head(dataplot)
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
summary(dataplot)
str(dataplot)
source('~/GitHub/WindResource/R/plotcalendar.R')
source('~/GitHub/WindResource/R/plotcalendar.R')
rownames(dataplot)
str(dataplot)
dataplot <- data.frame(date=as.Date(names(df)), value=df)
str(dataplot)
rownames(dataplot) <- NULL
str(dataplot)
str(as.Date(names(df)))
str(df)
dataplot <- data.frame(date=as.Date(names(df)), value=as.numeric(df))
str(dataplot)
dataplot <- dataplot[complete.cases(dataplot),]
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
plotcalendar (wd10, var="max", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd10, var="min", ane="Ane1", shiny=F)
plotcalendar (wd10, var="ave", ane="Ane2", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
runApp("~/GitHub/WindResource/inst/shiny")
library(WindResource)
runApp("~/GitHub/WindResource/inst/shiny")
library(WindResource)
runApp("~/GitHub/WindResource/inst/shiny")
htmlOutput(paste("plotSerie",ane.names[i],sep=""))
ane.names
tabsetPanel
tabs
do.call(tabsetPanel, tabs)
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
plotcalendar (wd10, var="ave", ane="Ane1", shiny=T)
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
runApp("~/GitHub/WindResource/inst/shiny")
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
plotcalendar (wd10, var="ave", ane="Ane2", shiny=F)
runApp("~/GitHub/WindResource/inst/shiny")
library(WindResource)
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
plotwindserie(wd10,2012,09,
vars=c("Ave"),
axis=c("Ave","Min","Max","Dir"),
shiny=F)
plotwindserie(wd10,2012,09,
vars=c("ave"),
axis=c("Ave","Min","Max","Dir"),
shiny=F)
source('~/GitHub/WindResource/inst/shiny/server.R')
runApp("~/GitHub/WindResource/inst/shiny")
as.list(ane.names)
ane.names
source('~/GitHub/WindResource/inst/shiny/server.R')
ane.names <- wd10$info$ane$ane.names
as.list(ane.names)
str(ane.names)
list("2012" = "2012",
"2013" = "2013")
names(ane.names)
ane.names
a <- ane.names
names(a) <- ane.names
a
as.list(a)
source('~/GitHub/WindResource/inst/shiny/server.R')
source('~/GitHub/WindResource/inst/shiny/server.R')
source('~/GitHub/WindResource/inst/shiny/server.R')
source('~/GitHub/WindResource/inst/shiny/server.R')
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
## what if we cluster them into 3 groups?
kmeans.ani(x, centers = 3)
## create an HTML animation page
saveHTML({
ani.options(interval = 2)
par(mar = c(3, 3, 1, 1.5), mgp = c(1.5, 0.5, 0))
cent = 1.5 * c(1, 1, -1, -1, 1, -1, 1, -1)
x = NULL
for (i in 1:8) x = c(x, rnorm(25, mean = cent[i]))
x = matrix(x, ncol = 2)
colnames(x) = c("X1", "X2")
kmeans.ani(x, centers = 4, pch = 1:4, col = 1:4)
}, img.name = "kmeans.ani", htmlfile = "kmeans.ani.html", ani.height = 480, ani.width = 480,
title = "Demonstration of the K-means Cluster Algorithm", description = "Move! Average! Cluster! Move! Average! Cluster! ...")
setwd("~/Cursos Dictados/PCA/Casos")
setwd("~/Cursos Dictados/PCA/Casos")
rm(list=ls())   #borra la memoria
#Lee archivo .txt de DOS
data = read.table("Multiv02 Papel.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
data = read.table("Multiv02 Papel.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
head(data)
# Analisis de Componentes Principales de S o R
pca <- princomp(data, cor=TRUE)  #cor=F para S, cor=T para R
source('~/.active-rstudio-document')
install.packages("extRemes")
install.packages(c("igraph", "Rcpp"))
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
library("knitr", lib.loc="C:/Users/mbonoli/Documents/R/win-library/3.0")
library(markdown)
install.packages("KernSmooth")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.0.3/library")
install.packages("yaml")
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
runGUI(wd10)
library("WindResource")
library(shiny)
data(wd)
data(wd10)
# Esta es la forma de guardar los archivos: save(wd10,file="wd10.rda",compress=TRUE)
runGUI(wd10)
install.packages("fitdistrplus")
library("WindResource")
library(shiny)
data(wd)
data(wd10)
# Esta es la forma de guardar los archivos: save(wd10,file="wd10.rda",compress=TRUE)
runGUI(wd10)
install.packages("roxygen2")
\title{\textbf{M\'{e}todos MIS y POT para estimaci\'{o}n de \emph{Vref} en proyecto de energ\'{i}a e\'{o}lica}}
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runGUI(wd10)
install.packages("devtools")
library(devtools)
install_github("mbonoli/WindResource")
?shuttle
install.packages("MASS")
library("MASS", lib.loc="~/R/win-library/3.1")
?shuttle
data(shuttle)
shuttle
View(shuttle)
?shuttle
logRegRavens <- glm(shuttle$use ~ shuttle$wind,family="binomial")
logReg <- glm(shuttle$use ~ shuttle$wind,family="binomial")
logReg
summary(logReg)
data <- shuttle
data$auto <- as.numeric(data$use=="auto")
View(data)
logReg1 <- glm(data$auto ~ data$wind,family="binomial")
logReg
logReg1
exp(logReg1$coeff)
data$head <- as.numeric(data$wind=="head")
View(data)
logReg1 <- glm(data$auto ~ data$head,family="binomial")
exp(logReg1$coeff)
logReg2 <- glm(data$auto ~ data$head + data$magn,family="binomial")
logReg2
exp(logReg2$coeff)
glm(data$auto ~ data$head,family="binomial")
glm(I(1-data$auto) ~ data$head,family="binomial")
data(InsectSprays)
View(shuttle)
View(data)
data(InsectSprays)
head(InsectSprays)
glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")
data2 <- InsectSprays
data2$spray <- factor(data2$spray, levels = c('B', 'A', 'C','D','E','F')
)
data2$spray
glm(InsectSprays$count ~ InsectSprays$spray,family="poisson",)
glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")
exp(coef(glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")))
1-exp(coef(glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")))
exp(coef(glm(InsectSprays$count ~ InsectSprays$spray,family="poisson")))-1
utils::data(anorexia, package = "MASS")
anorex.1 <- glm(Postwt ~ Prewt + Treat + offset(Prewt),
family = gaussian, data = anorexia)
summary(anorex.1)
anorex.1 <- glm(Postwt ~ Prewt + Treat + Prewt,
family = gaussian, data = anorexia)
glm(Postwt ~ Prewt + Treat + offset(Prewt),
family = gaussian, data = anorexia)
glm(Postwt ~ Prewt + Treat + Prewt,
family = gaussian, data = anorexia)
glm(Postwt ~ Prewt + Treat + offset(Prewt),  family = gaussian, data = anorexia)
glm(Postwt ~ Prewt + Treat + offset(log(10)+Prewt),  family = gaussian, data = anorexia)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
dataOlavarria <- read.csv("~/Investigacion/Vientos/datos/Olavarria.csv", sep=";")
wdOlavarria <- setWd (dataOlavarria,
interval = 1,
date.var = "Fecha",
date.format = "YYYYMMDD",
time.var ="Hora",
time.format = "HHMM",
ane.names = c("Ane1"),
ane.height= NA,
speed.ave.var = "Vel",
speed.min.var = NA,
speed.max.var = NA,
speed.sd.var = NA,
speed.var.var = NA,
speed.unit = NA,
dir.var = "Dir",
dir.unit = "deg",
temp.var = "Temp",
temp.unit = "C",
pres.var = "Pres",
pres.unit = "bar")
library(WindResource)
dataOlavarria <- read.csv("~/Investigacion/Vientos/datos/Olavarria.csv", sep=";")
wdOlavarria <- setWd (dataOlavarria,
interval = 1,
date.var = "Fecha",
date.format = "YYYYMMDD",
time.var ="Hora",
time.format = "HHMM",
ane.names = c("Ane1"),
ane.height= NA,
speed.ave.var = "Vel",
speed.min.var = NA,
speed.max.var = NA,
speed.sd.var = NA,
speed.var.var = NA,
speed.unit = NA,
dir.var = "Dir",
dir.unit = "deg",
temp.var = "Temp",
temp.unit = "C",
pres.var = "Pres",
pres.unit = "bar")
source('~/Investigacion/Vientos/WindResource/R/setWd.R')
dataOlavarria <- read.csv("~/Investigacion/Vientos/datos/Olavarria.csv", sep=";")
wdOlavarria <- setWd (dataOlavarria,
interval = 1,
date.var = "Fecha",
date.format = "YYYYMMDD",
time.var ="Hora",
time.format = "HHMM",
ane.names = c("Ane1"),
ane.height= NA,
speed.ave.var = "Vel",
speed.min.var = NA,
speed.max.var = NA,
speed.sd.var = NA,
speed.var.var = NA,
speed.unit = NA,
dir.var = "Dir",
dir.unit = "deg",
temp.var = "Temp",
temp.unit = "C",
pres.var = "Pres",
pres.unit = "bar")
setwd("~/Investigacion/Vientos/WindResource/data")
save(wdOlavarria, file="~/Investigacion/Vientos/WindResource/data/wdOlavarria.rda")
library(WindResource)
data(wdOlavarria)
quote(x)
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
str(wdOlavarria)
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
library(WindResource)
library("WindResource")
data(wdOlavarria)
runGUI(wdOlavarria)
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
source('~/Investigacion/Vientos/WindResource/R/runGUI.R')
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
.path.package()
.path.package(WindResource)
.path.package("WindResource")
library("WindResource")
.path.package("WindResource")
path.package("WindResource")
paste(path.package("WindResource"),"/shiny/"
)
paste(path.package("WindResource"),"/shiny/",sep="")
source('~/Investigacion/Vientos/WindResource/R/runGUI.R')
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
source('~/Investigacion/Vientos/WindResource/R/runGUI.R')
source('~/Investigacion/Vientos/WindResource/R/runGUI.R')
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
inRS
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
paste(path.package("WindResource"),"/shiny/dataGUIwd.Rd",sep="")
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
library(WindResource)
data(wdOlavarria)
runGUI(wdOlavarria)
source('~/Investigacion/Vientos/WindResource/R/runGUI.R')
source('~/Investigacion/Vientos/WindResource/R/runGUI.R')
data(wdOlavarria)
runGUI(wdOlavarria)
str(wdOlavarria)
dataGUIwd$info$ane$ane.names
source('~/Investigacion/Vientos/WindResource/inst/shiny/server.R')
shiny::runApp('~/Investigacion/Vientos/WindResource/inst/shiny')
library(WindResource)
