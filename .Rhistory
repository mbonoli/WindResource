write.table(dataMobile,flie="CAmobile.csv", sep=",", header=T)
write.table(dataMobile,flie="CAmobile.csv", sep=",")
write.table(dataMobile,file="CAmobile.csv", sep=",")
dataMobile <- read.table("CAmobile.csv",
sep=",",
header=T)
write.table(dataMobile,file="CAmobile.csv", sep=",", row.names=F)
setwd("~/Cursos Dictados/CA/Casos")
dataMobile <- read.table("CAmobile.csv",
sep=",",
header=T)
dataMobile
write.table(dataMobile,file="CAmobile.csv", sep="\t", row.names=F)
dataMobile <- read.table("CAmobile.csv",
sep="\t",
header=T)
dataMobile
write.table(dataMobile,file="CAmobile.csv", sep="\t", row.names=F, quote=F)
setwd("~/Cursos Dictados/CA/Casos")
dataMobile <- read.table("CAmobile.csv",
sep="\t",
header=T)
dataMobile
dataMobile <- read.table("CAmobile.csv",
sep=",",
header=T)
dataMobile <- read.table("CAmobile.csv",
sep=",",
header=F)
dataMobile <- read.table("CAmobile.csv",
sep=",",
header=F)
setwd("~/Cursos Dictados/CA/Casos")
dataMobile <- read.table("CAmobile.csv",
sep=",",
header=T)
head(dataMobile)
# Establezco el directorio de trabajo
setwd("~/Cursos Dictados/CA/Casos")
# Cargo la tabla con los datos
dataMobile <- read.table("CAmobile.csv", sep=",", header=T)
# Visualizo los primeros seis registros de la tabla
head(dataMobile)
# Genero una tabla de contingencia con la información de las dos variables. Al resultado lo llamo tabMobile
tabMobile <- table(dataMobile[,1], dataMobile[,2])
# Muestro tabMobile
tabMobile
ca(tabMobile)
# Genero un Mapa Factorial Asimétrico de columnas  en el espacio de filas
plot(ca(tabMobile), map="colprincipal")
# Genero un Mapa Factorial Asimétrico de columnas  en el espacio de filas
# El tamaño representa las masas
plot(ca(tabMobile), map="colprincipal", mass=c(T,T))
setwd("~/Cursos Dictados/CA/Casos")
load(file="CAcremas.Rdata")
library(ca)
ca(tabCremas)
write.table(tabCremas, file="tabCremas.txt", sep="\t")
write.table(tabCremas, file="tabCremas.txt", sep="\t", row.names=F)
tabCremas <- read.table(file="tabCremas.txt", sep="\t", headers=T)
tabCremas <- read.table(file="tabCremas.txt", sep="\t", header=T)
head(tabCremas)
plot(ca(tabCremas), map = "rowprincipal")
plot(ca(tabCremas),
map = "rowprincipal",
labels=1)
plot(ca(tabCremas),
map = "rowprincipal",
labels=2)
plot(ca(tabCremas),
map = "rowprincipal",
labels=3)
plot(ca(tabCremas),
map = "rowprincipal",
labels=0)
plot(ca(tabCremas),
map = "rowprincipal",
labels=1)
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(1,2))
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(0,2))
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(2,2))
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(1,2))
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(0,2))
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(3,2))
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(0,2))
plot(ca(tabCremas),
map = "rowprincipal",
labels=c(0,2),
what=c("none","all"))
library("caGUI", lib.loc="C:/Users/mbonoli/Documents/R/win-library/3.0")
caGUI()
plot3d.ca(ca(obj = tabCremas, nd = NA, suprow = NA, supcol = NA, subsetrow = NA, subsetcol = NA), dim = c(Axe1num, Axe2num, Axe3num), pch = c(rpchchoicenum, srpchchoicenum, cpchchoicenum, scpchchoicenum), map = "rowprincipal", what = c("none", "all"), contrib = "none",     labels = lbllog, mass = c(rowmasslog, colmasslog), arrows = c(rowarrowlog, colarrowlog), col = c(Rcol.row.tmp, Ccol.col.tmp), labcol = c(Rcol.row.tmp, Ccol.col.tmp), sf = sfvarnum)
plot3d.ca(ca(obj = tabCremas), dim = c(1, 2, 3), map = "rowprincipal", what = c("none", "all"), sf = sfvarnum)
plot3d.ca(ca(obj = tabCremas), dim = c(1, 2, 3), map = "rowprincipal", what = c("none", "all"))
tabCremas2 <- tabCremas
tabCremas2$NUTR <- tabCremas2$DerN + tabCremas2$Ferr
head(tabCremas2)
dim(tabCremas2)
plot(ca(tabCremas), map="rowprincipal")
plot(ca(tabCremas2),
map = "rowprincipal",
labels=c(0,2),           # Quito las etiquetas de las filas
what=c("none","all"))    # Quito los puntos de las filas
plot(ca(tabCremas), map="colprincipal",labels=c(0,2),what=c("none","all"))
plot(ca(tabCremas),
dim=c(1,3),
map="colprincipal",
labels=c(0,2),
what=c("none","all"))
# Genero un mapa en 2 dimensiones con las dimasiones 2 y 3
plot(ca(tabCremas),
dim=c(2,3),
map="colprincipal",
labels=c(0,2),
what=c("none","all"))
# Genero un Mapa Factorial Asimétrico colprincipal indicando que la columna 18 corresponde a puntos suplementarios
plot(ca(tabCremas3,supcol=18),
map="colprincipal",
labels=c(0,2),
what=c("none","all"))
plot(ca(tabCremas,supcol=18),
map="colprincipal",
labels=c(0,2),
what=c("none","all"))
plot(ca(tabCremas2,supcol=18),
map="colprincipal",
labels=c(0,2),
what=c("none","all"))
corresp
plot(corresp)
write.table(CAdesercion,"CAdesercion.csv",sep=",",rownames=F)
write.table(CAdesercion,"CAdesercion.csv",sep=",")
CAdesercion <- read.table("CAdesercion.csv",sep=",",header=T)
write.table(tabDesercion,"CAdesercion.csv",sep=",")
CAdesercion <- read.table("CAdesercion.csv",sep=",",header=T)
plot(corresp$rowpcoord[,1],corresp$rowpcoord[,2])
tabDesercion <- read.table("CAdesercion.csv",sep=",",header=T)
# Visualizo los primeros seis registros de la tabla
head(tabDesercion)
# Corro el análisis de correspondencia múltiple
corresp <- mjca(obj = tabDesercion, nd = NA, lambda = "Indicator", supcol = NA)
library("WindResource")
remove.packages("ggplot2")
install.packages("ggplot2")
library("WindResource")
library(shiny)
source('~/GitHub/WindResource/R/plotcalendar.R')
library("WindResource")
library(shiny)
data(wd)
data(wd10)
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
str(dates)
str(val)
tapply(as.Date(wd$time$dt),val,mean)
str(tapply(as.Date(wd$time$dt),val,mean))
str(dates)
str(val)
tapply(dates,val,mean)
warnings()
tapply(dates,val,mean,rn.na=T)
tapply(dates,val,mean,na.rm=T)
df <- data.frame(date=as.factor(as.Date(wd10$time$dt)),
ave=wd10$ane$Ane1$ave)
head(df)
tapply(df$ave,df$date,ave)
str(tapply(df[,2],df[,1],mean))
dataplot <- tapply(df[,2],df[,1],mean)
tapply(df$ave,df$date,ave)
tapply(df[,2],df[,1],mean)
df[,2]
tapply(val,dates,mean,na.rm=T)
tapply(as.factor(as.Date(wd10$time$dt)),wd10$ane$Ane1$ave,mean,na.rm=T))
tapply(as.factor(as.Date(wd10$time$dt)),wd10$ane$Ane1$ave,mean,na.rm=T
)
tapply(wd10$ane$Ane1$ave,as.factor(as.Date(wd10$time$dt)),mean,na.rm=T)
tapply(val,dates,mean,na.rm=T)
dataplot <- data.frame(date=as.Date(names(df)), value=df)
names(df)
df
df <- tapply(val,dates,mean,na.rm=T)
dates <- as.factor(as.Date(wd$time$dt))
val <- wd$ane[[ane]][var][[1]]
dates <- as.factor(as.Date(wd$time$dt))
val <- wd$ane[[ane]][var][[1]]
df <- tapply(val,dates,mean,na.rm=T)
dataplot <- data.frame(date=as.Date(names(df)), value=df)
head(dataplot)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
head(dataplot)
plotdata <- plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
#                    options=list(
#                      title="Calendar heat map of MSFT adjsuted close",
#                      calendar="{cellSize:10,
#                                  yearLabel:{fontSize:20, color:'#444444'},
#                                  focusedCellColor:{stroke:'red'}}",
#                      width=590, height=320),
chartid="Calendar")
)
summary(dataplot)
dataplot <- complete.cases(dataplot)
dataplot
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
#                    options=list(
#                      title="Calendar heat map of MSFT adjsuted close",
#                      calendar="{cellSize:10,
#                                  focusedCellColor:{stroke:'red'}}",
#                                  yearLabel:{fontSize:20, color:'#444444'},
#                      width=590, height=320),
chartid="Calendar")
)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
summary(dataplot)
dataplot <- data.frame(date=as.Date(names(df)), value=df)
complete.cases(dataplot)
dataplot <- dataplot[complete.cases(dataplot),]
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd, var="ave", ane="Ane1", shiny=F)
summary(dataplot)
source('~/GitHub/WindResource/R/plotcalendar.R')
plot(
gvisCalendar(data=dp2,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
df <- data.frame(date=as.factor(as.Date(wd10$time$dt)),
ave=wd10$ane$Ane1$ave)
head(df)
tapply(df$ave,df$date,ave)
str(tapply(df[,2],df[,1],mean))
dataplot <- tapply(df[,2],df[,1],mean)
dp <- data.frame(date=as.Date(names(dataplot)), value=dataplot)
str(dp)
plot(
gvisCalendar(data=dp2,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
dp2 <- dp[!is.na(dp$value),]
summary(dp2)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
stock <- "MSFT"
start.date <- "2012-01-01"
end.date <- Sys.Date()
quote <- paste("http://ichart.finance.yahoo.com/table.csv?s=",
stock,
"&a=", substr(start.date,6,7),
"&b=", substr(start.date, 9, 10),
"&c=", substr(start.date, 1,4),
"&d=", substr(end.date,6,7),
"&e=", substr(end.date, 9, 10),
"&f=", substr(end.date, 1,4),
"&g=d&ignore=.csv", sep="")
stock.data <- read.csv(quote, as.is=TRUE)
stock.data$Date <- as.Date(stock.data$Date)
plot(
gvisCalendar(data=stock.data, datevar="Date", numvar="Adj.Close",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
str(dataplot)
str(stock.data)
str(stock.data)
str(dataplot)
dataplot
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
dataplot
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
head(dataplot)
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
summary(dataplot)
str(dataplot)
source('~/GitHub/WindResource/R/plotcalendar.R')
source('~/GitHub/WindResource/R/plotcalendar.R')
rownames(dataplot)
str(dataplot)
dataplot <- data.frame(date=as.Date(names(df)), value=df)
str(dataplot)
rownames(dataplot) <- NULL
str(dataplot)
str(as.Date(names(df)))
str(df)
dataplot <- data.frame(date=as.Date(names(df)), value=as.numeric(df))
str(dataplot)
dataplot <- dataplot[complete.cases(dataplot),]
plot(
gvisCalendar(data=dataplot,
datevar="date",
numvar="value",
options=list(
title="Calendar heat map of MSFT adjsuted close",
calendar="{cellSize:10,
yearLabel:{fontSize:20, color:'#444444'},
focusedCellColor:{stroke:'red'}}",
width=590, height=320),
chartid="Calendar")
)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
plotcalendar (wd10, var="max", ane="Ane1", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
plotcalendar (wd10, var="min", ane="Ane1", shiny=F)
plotcalendar (wd10, var="ave", ane="Ane2", shiny=F)
source('~/GitHub/WindResource/R/plotcalendar.R')
runApp("~/GitHub/WindResource/inst/shiny")
library(WindResource)
runApp("~/GitHub/WindResource/inst/shiny")
library(WindResource)
runApp("~/GitHub/WindResource/inst/shiny")
htmlOutput(paste("plotSerie",ane.names[i],sep=""))
ane.names
tabsetPanel
tabs
do.call(tabsetPanel, tabs)
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
plotcalendar (wd10, var="ave", ane="Ane1", shiny=T)
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
runApp("~/GitHub/WindResource/inst/shiny")
plotcalendar (wd10, var="ave", ane="Ane1", shiny=F)
plotcalendar (wd10, var="ave", ane="Ane2", shiny=F)
runApp("~/GitHub/WindResource/inst/shiny")
library(WindResource)
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
plotwindserie(wd10,2012,09,
vars=c("Ave"),
axis=c("Ave","Min","Max","Dir"),
shiny=F)
plotwindserie(wd10,2012,09,
vars=c("ave"),
axis=c("Ave","Min","Max","Dir"),
shiny=F)
source('~/GitHub/WindResource/inst/shiny/server.R')
runApp("~/GitHub/WindResource/inst/shiny")
as.list(ane.names)
ane.names
source('~/GitHub/WindResource/inst/shiny/server.R')
ane.names <- wd10$info$ane$ane.names
as.list(ane.names)
str(ane.names)
list("2012" = "2012",
"2013" = "2013")
names(ane.names)
ane.names
a <- ane.names
names(a) <- ane.names
a
as.list(a)
source('~/GitHub/WindResource/inst/shiny/server.R')
source('~/GitHub/WindResource/inst/shiny/server.R')
source('~/GitHub/WindResource/inst/shiny/server.R')
source('~/GitHub/WindResource/inst/shiny/server.R')
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
## what if we cluster them into 3 groups?
kmeans.ani(x, centers = 3)
## create an HTML animation page
saveHTML({
ani.options(interval = 2)
par(mar = c(3, 3, 1, 1.5), mgp = c(1.5, 0.5, 0))
cent = 1.5 * c(1, 1, -1, -1, 1, -1, 1, -1)
x = NULL
for (i in 1:8) x = c(x, rnorm(25, mean = cent[i]))
x = matrix(x, ncol = 2)
colnames(x) = c("X1", "X2")
kmeans.ani(x, centers = 4, pch = 1:4, col = 1:4)
}, img.name = "kmeans.ani", htmlfile = "kmeans.ani.html", ani.height = 480, ani.width = 480,
title = "Demonstration of the K-means Cluster Algorithm", description = "Move! Average! Cluster! Move! Average! Cluster! ...")
setwd("~/Cursos Dictados/PCA/Casos")
setwd("~/Cursos Dictados/PCA/Casos")
rm(list=ls())   #borra la memoria
#Lee archivo .txt de DOS
data = read.table("Multiv02 Papel.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
data = read.table("Multiv02 Papel.txt", header=TRUE, sep="\t", na.strings="NA", dec=".", strip.white=TRUE)
head(data)
# Analisis de Componentes Principales de S o R
pca <- princomp(data, cor=TRUE)  #cor=F para S, cor=T para R
source('~/.active-rstudio-document')
install.packages("extRemes")
install.packages(c("igraph", "Rcpp"))
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
library("knitr", lib.loc="C:/Users/mbonoli/Documents/R/win-library/3.0")
library(markdown)
install.packages("KernSmooth")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.0.3/library")
install.packages("yaml")
library("WindResource")
library(shiny)
data(wd)
data(wd10)
runApp("~/GitHub/WindResource/inst/shiny")
runGUI(wd10)
